---
name: default-integrations14-bare

on:
  push:
  pull_request:

permissions: {}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ${{ matrix.distribution }}-${{ matrix.version }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - distribution: ubuntu
            version: '22.04'
            experimental: true
          - distribution: ubuntu
            version: '20.04'
            experimental: true
    env:
      ANSIBLE_CALLBACKS_ENABLED: profile_tasks
      ANSIBLE_EXTRA_VARS: "-e starbase_no_log=false -e starbase_version=v0.7.0 -e nodejs_version=14.x"
      ANSIBLE_ROLE: juju4.starbase
      SUITE: default-integrations
      NEO4J_PASSWORD_CI: neo4j_123456

    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ env.ANSIBLE_ROLE }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/setup-node@v4
        with:
          node-version: '14.x'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ansible-lint flake8 yamllint
          which ansible
          pip3 install ansible
          pip3 show ansible
          ls -l $HOME/.local/bin || true
          ansible --version
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE
          [ -f molecule/$SUITE/requirements.yml ] && ansible-galaxy install -r molecule/$SUITE/requirements.yml
          { echo '[defaults]'; echo 'callback_whitelist = profile_tasks, timer'; echo 'roles_path = ../:/home/runner/.ansible/roles'; echo 'ansible_python_interpreter: /usr/bin/python3'; } >> ansible.cfg
      - name: Environment
        run: |
          set -x
          pwd
          env
          find -ls
      - name: Clean nodejs environment
        run: |
          set -x
          dpkg -l | grep nodejs || true
          ls -l /opt/hostedtoolcache/ || true
          whereis node || true
          whereis npm || true
          ls -l /usr/local/bin/node* || true
          node --version || true
          npm --version || true
          sudo rm -Rf /opt/hostedtoolcache/node/1[68]*
          node --version || true
      - name: Set java
        run: |
          set -x
          sudo rm -Rf /usr/lib/jvm/temurin-8-jdk-amd64 /usr/lib/jvm/temurin-11-jdk-amd64
          sudo update-java-alternatives --list
          sudo update-java-alternatives -s $(sudo update-java-alternatives -l | grep '17-jdk' | cut -d " " -f1)
        continue-on-error: true
      - name: Set java - /etc/environment
        run: |
          set -x
          cat /etc/environment
          sed "s@^JAVA_HOME=/usr/lib/jvm/temurin-11-jdk-amd64@JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64@" /etc/environment | sudo tee /etc/environment
        continue-on-error: true
      - name: run test
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$SUITE/converge.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: idempotency run
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$SUITE/converge.yml ${ANSIBLE_EXTRA_VARS} | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0)  || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 0)
      - name: On failure
        run: |
          systemctl -l --no-pager status
          systemctl -l --no-pager --failed
          ls -l /usr/bin/ | egrep '(python|pip|ansible)'
          pip freeze
          pip3 freeze
          ip addr
          cat /etc/resolv.conf
          host www.google.com
          ping -c 1 www.google.com || true
          ping -c 1 8.8.8.8 || true
        if: ${{ failure() }}
        continue-on-error: true
      - name: After script - ansible setup
        run: |
          ansible -i inventory --connection=local -m setup localhost
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - systemd
        run: |
          systemctl -l --no-pager status neo4j || true
          systemctl -l --no-pager status starbase || true
          systemd-analyze --no-pager security || true
          systemd-analyze --no-pager security starbase || true
          systemd-analyze --no-pager verify starbase || true
          rsyslogd -v
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - etc
        run: |
          set -x
          cat /etc/systemd/system/starbase.service
          cat /var/_starbase/starbase/config.yaml
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - files
        run: |
          set -x
          find /var/_starbase/starbase/
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - etc neo4j
        run: |
          set -x
          cat /etc/neo4j/neo4j.conf
          cat /lib/systemd/system/neo4j.service
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - npm
        run: |
          cd /var/_starbase/starbase
          set -x
          sudo -u _starbase npm outdated || true
          sudo -u _starbase npm audit || true
          sudo -u _starbase yarn audit || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - cypher
        run: |
          echo $JAVA_HOME
          set -x
          env
          cat /etc/environment
          export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64
          echo "CALL db.schema.visualization()" | cypher-shell -a localhost -u neo4j -p $NEO4J_PASSWORD_CI
          echo "MATCH (n) RETURN labels(n), count(*)" | cypher-shell -a localhost -u neo4j -p $NEO4J_PASSWORD_CI
          echo "MATCH ()-[r]->() RETURN count(r) as count" | cypher-shell -a localhost -u neo4j -p $NEO4j_PASSWORD_CI
        if: ${{ always() }}
        continue-on-error: true
